// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/web.proto

// Web exposes a backend server over gRPC.

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/johanbrandhorst/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/web.proto", fileDescriptor_62c4a9a417d5e65b) }

var fileDescriptor_62c4a9a417d5e65b = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4f, 0x4d, 0xd2, 0x03, 0xb3, 0x84, 0x98, 0xcb, 0x53, 0x93, 0xa4, 0x2c, 0xd2,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xb3, 0xf2, 0x33, 0x12, 0xf3, 0x92,
	0x8a, 0x12, 0xf3, 0x52, 0x32, 0xf2, 0x8b, 0x8a, 0x4b, 0xf4, 0xc1, 0xca, 0x92, 0x4a, 0xd3, 0x20,
	0x0c, 0xfd, 0xf4, 0xfc, 0x82, 0x8c, 0xd4, 0xa2, 0xac, 0x62, 0x88, 0x76, 0x23, 0x4e, 0x2e, 0x76,
	0xa7, 0xc4, 0xe4, 0xec, 0xd4, 0xbc, 0x14, 0xa7, 0xea, 0x5f, 0x0e, 0xd6, 0x78, 0xcc, 0x49, 0x2f,
	0x2a, 0x48, 0x2e, 0x4f, 0x4d, 0xd2, 0x4d, 0xca, 0xcf, 0xcc, 0x49, 0x2d, 0x2a, 0xc8, 0x49, 0x2c,
	0x49, 0x85, 0x1a, 0x99, 0x9c, 0x93, 0x99, 0x9a, 0x57, 0x12, 0x45, 0x9e, 0xe6, 0xe2, 0xd4, 0xa2,
	0xb2, 0xd4, 0xa2, 0x24, 0x36, 0x30, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x58, 0xbd,
	0x67, 0xe0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "web.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/web.proto",
}
